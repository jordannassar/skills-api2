generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model category {
  id       Int    @id(map: "category_pkey") @default(autoincrement())
  name     String @unique @db.VarChar(255)
  parentId Int?
  //icon           String     @db.VarChar(255)
  //category       category   @relation("categoryTocategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: //"catgeory_parentid_foreign")
  //other_category category[] @relation("categoryTocategory")
  post     post[]
}

model post {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  details      String        @db.VarChar(255)
  createdAt    DateTime?     @default(now()) @db.Date
  updatedAt    DateTime?     @default(now()) @db.Date
  type         Int           @db.SmallInt
  userId       Int           @db.Integer
  categoryName String
  category     category?     @relation(fields: [categoryName], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "post_categoryname_foreign")
  link         String?       @db.VarChar(255)
  imageLink    String?       @db.VarChar(255)
  searchIndex  searchIndex[]
  user         user          @relation(fields: [userId], references: [id])
}

//model postLink {
//  id     Int    @id @default(autoincrement())
//  postId Int
//  name   String @db.VarChar(255)
//  url    String @db.VarChar(255)
//  post   post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "postlink_postid_foreign")
//}
model searchIndex {
  id     Int    @id @default(autoincrement())
  word   String @db.VarChar(255)
  weight Int
  postId Int
  post   post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "searchindex_postid_foreign")
}

model user {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  avatarUrl String    @db.VarChar(255)
  yearBorn  Int       @db.Integer
  bio       String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Date
  updatedAt DateTime? @default(now()) @db.Date
  roles     String?   @db.VarChar(255)
  isAdmin   Boolean   @default(false)
  post      post[]
}
